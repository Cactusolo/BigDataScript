#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Genome sequencing functions
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Command line parameters
#-------------------------------------------------------------------------------

# Required options
#fq1				:= ""				# Fastq file 
#fq2				:= ""				# Fastq file, pair end reads. Empty if single-end
#referenceFasta	:= ""				# Reference genome Fasta file

# Other options
splitNumReads	:= 100 * 1000		# Split fastq files to 'splitNumReads'
mapSortMemory	:= 1 * G			# Memory used while sorting BAM file (samtools sort)
javaGCThreads	:= 2				# Limit number of cores to use for garbage collection

#-------------------------------------------------------------------------------
# Common variables
#-------------------------------------------------------------------------------

# Extensions used in FASTQ files
fastqExtentions	:= [".gz", ".fq", ".fastq"]
java			:= "java -XX:ParallelGCThreads=$javaGCThreads "		# Java

#-------------------------------------------------------------------------------
# Base name, remove all common extensions
#-------------------------------------------------------------------------------
string removeExtFastq(string fq) {
	rmExt := fq
	for( string ext : fastqExtentions ) {
		rmExt = rmExt.removeExt(ext)
	}
	return( rmExt )
}

#-------------------------------------------------------------------------------
# Map reads to genome
#-------------------------------------------------------------------------------
void map(string referenceFasta, string fq1, string fq2) {
	bamNoExt := removeExtFastq(fq1)
	bam := bamNoExt + ".bam"

	task( bam <- [fq1, fq2] ) {
		sys bwa -mem -t $cpus $fq1 $fq2 \
			| samtools sort -@ $cpus -m $mapSortMemory -f - $bamNoExt
	}
}

#-------------------------------------------------------------------------------
# Index genome (prepare for mapping reads)
#-------------------------------------------------------------------------------
void mapIndex(string fasta) {
	indexFile := fasta + ".bwt"
	task( indexFile <- fasta ) {
		sys bwa index fasta
	}
	wait
}

#-------------------------------------------------------------------------------
# Run task  to split a fastq file into 'splitNumReads' reads (does not wait)
# Return file names
#-------------------------------------------------------------------------------
string splitFatsq(string fq) {
	# Empty name? Nothing to do
	if( ! fq )	return("")

	# Compressed files use gunzip
	cat := "cat"
	if( fq.endsWith('.gz') )	cat = "gunzip -c"	

	names := removeExtFastq( fq ) + "."
	numLines := 4 * splitNumReads
	firstName := names + "xaa"
	task( firstName <- fq ) {
		sys $cat $fq | split -l $numLines - $names
	}
	return( names )
}

#-------------------------------------------------------------------------------
# Usage example
#-------------------------------------------------------------------------------
#mapIndex(referenceFasta)
#map(referenceFasta, fq1, fq2)

