- Parsing. All these should work the same:

	if( true )	 { print("Hi\n"); }

	if( true )	 { 
		print("Hi\n"); 
	}

	if( true )	 print("Hi\n"); 

	if( true )	 
		print("Hi\n"); 

- Multi-line list definition
	string[] list = [ "hi"
						, "bye"
						, "wolrd"
					]

- Task: Rethink parsing. Anything within curly brakets is a 'SYS'. E.g.

		task( $out <- $in ) {
			ls -al $HOME
			for f in `ls -al *.txt`
			do
				echo \$f
			done
		}

	Is this vialble? Is it better than the next snippet?:
	
		task( $out <- $in ) {
			sys ls -al $HOME \
			for f in `ls -al *.txt` \
			do \
				echo \$f \
			done \
		}



- BUG:  string l = [ "sadf" ]		(l is a string, not a list, but assigned a list => Breaks compilation)

- task( out <- in ): It is an Execution error if output does not exists or has zero length!

- task : "emptyOut = true" option to allow zero length out as "success"

- String operator +=

- List operator +=

- List functions : length() or size()

- Maps

	- Variable definition
		int{string} mymap			// A map of int using string keys
		string{string} m2			// A map of string using string
		string{} m3					// A map of string (using string as key). Default key is 'string'
		
	- Map mathods
		m2{"safds"} = "hi there"	// Add or replace and entry
		str = m2{"asdf"}			// Get an entry (empty string if no entry available)
		m2.hasKey("asdf")			// Does this entry exists in the map?

- Command line option to show variables and PC (program counter) in checkpoint file

- Command line option: -noTask (does not execute any task)

- Comman line options : debug, verbose (now is way too verbose). By default it should not print anything

- Cluster: Moab vs GridEngine

- Local node info: E.g. Number of cpus. We need a standard way to get this information (I want to run on all avaialble cpus)

- Automatic stats using "task( out <- in )"

----------------------------------------------------------------------------------------------------

									Documentation
									-------------
- Web page

- Check thread limits

	http://stackoverflow.com/questions/10742634/java-outofmemoryerror-when-creating-100-threads

		You can be limit by max user processes, 
			- to know your limit use :		ulimit -u
			- to change the limit :			ulimit -u 10000

		All limits

		$ ulimit -a
		core file size          (blocks, -c) 0
		data seg size           (kbytes, -d) unlimited
		scheduling priority             (-e) 0
		file size               (blocks, -f) unlimited
		pending signals                 (-i) 71713
		max locked memory       (kbytes, -l) 64
		max memory size         (kbytes, -m) unlimited
		open files                      (-n) 1024
		pipe size            (512 bytes, -p) 8
		POSIX message queues     (bytes, -q) 819200
		real-time priority              (-r) 0
		stack size              (kbytes, -s) 8192
		cpu time               (seconds, -t) unlimited
		max user processes              (-u) 1024
		virtual memory          (kbytes, -v) unlimited
		file locks                      (-x) unlimited

- timeout command:
	- A couple of implementations are shown in scripts directories (untested!)
	- The "real" implementation of the command can be found in "GNU Operating system Core-Utils":
		http://www.gnu.org/software/coreutils/

		to install (e.g. version coreutils-8.13):

			wget http://ftp.gnu.org/gnu/coreutils/coreutils-8.13.tar.gz
			tar -xvzf coreutils-8.13.tar.gz
			cd coreutils-8.13
			./configure
			make

