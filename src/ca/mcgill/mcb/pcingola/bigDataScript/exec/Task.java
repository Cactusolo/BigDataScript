package ca.mcgill.mcb.pcingola.bigDataScript.exec;

import java.io.File;
import java.util.List;

import ca.mcgill.mcb.pcingola.bigDataScript.cluster.host.HostResources;
import ca.mcgill.mcb.pcingola.bigDataScript.serialize.BigDataScriptSerialize;
import ca.mcgill.mcb.pcingola.bigDataScript.serialize.BigDataScriptSerializer;
import ca.mcgill.mcb.pcingola.bigDataScript.util.Gpr;
import ca.mcgill.mcb.pcingola.bigDataScript.util.Timer;

/**
 * A task to be executed by an Executioner
 * 
 * @author pcingola
 */
public class Task implements BigDataScriptSerialize {

	public static final String SHE_BANG = "#!/bin/sh\n\n";

	protected String id; // Task ID
	protected boolean verbose, debug;
	protected boolean canFail; // Allow execution to fail
	protected boolean started; // Has this task started running?
	protected boolean done; // Is this task finished
	protected int exitValue; // Exit (error) code
	protected String pid; // PID (if any)
	protected String programFileName; // Program file name
	protected String programTxt; // Program's text (program's code)
	protected String node; // Preferred execution node (or hostname)
	protected String queue; // Preferred execution queue
	protected String stdoutFile, stderrFile, exitCodeFile; // STDOUT, STDERR & exit code Files
	protected HostResources resources; // Resources to be consumes when executing this task
	List<String> outputFiles; // Output files generated by this task. TODO Serialize this!
	Boolean checkOutputFiles;

	public Task() {
		resources = new HostResources();
		reset();
	}

	public Task(String id, String programFileName, String programTxt) {
		this.id = id;
		this.programFileName = programFileName;
		this.programTxt = programTxt;
		resources = new HostResources();
	}

	/**
	 * Check if output files are OK
	 * @return true if OK, false there is an error (output file does not exist or has zero length)
	 */
	protected boolean checkOutputFiles() {
		if (checkOutputFiles != null) return checkOutputFiles;
		if (!done || outputFiles == null) return true; // Nothing to check

		boolean check = true;
		for (String fileName : outputFiles) {
			File file = new File(fileName);

			if (!file.exists()) {
				if (verbose) Timer.showStdErr("Error: Task " + id + " failed. Output file '" + fileName + "' does not exist");
				check = false;
			} else if (file.length() <= 0) {
				if (verbose) Timer.showStdErr("Error: Task " + id + " failed. Output file '" + fileName + "' has zero length");
				check = false;
			}
		}

		checkOutputFiles = check; // Cache result, don't check each file again
		return checkOutputFiles;
	}

	/**
	 * Create a program file
	 */
	public void createProgramFile() {
		Gpr.toFile(programFileName, SHE_BANG + programTxt);
		(new File(programFileName)).setExecutable(true); // Allow execution onf this file

		// Set default file names
		String base = Gpr.removeExt(programFileName);
		if (stdoutFile == null) stdoutFile = base + ".stdout";
		if (stderrFile == null) stderrFile = base + ".stderr";
		if (exitCodeFile == null) exitCodeFile = base + ".exitCode";
	}

	/**
	 * Mark this task as failed
	 */
	public void failed() {
		started = true;
		exitValue = 1;
		done = true;
	}

	public String getExitCodeFile() {
		return exitCodeFile;
	}

	public int getExitValue() {
		if (!checkOutputFiles()) return 1; // Any output file failed?
		return exitValue;
	}

	public String getId() {
		return id;
	}

	public String getNode() {
		return node;
	}

	public String getPid() {
		return pid;
	}

	public String getProgramFileName() {
		return programFileName;
	}

	public String getQueue() {
		return queue;
	}

	public HostResources getResources() {
		return resources;
	}

	public String getStderrFile() {
		return stderrFile;
	}

	public String getStdoutFile() {
		return stdoutFile;
	}

	public boolean isCanFail() {
		return canFail;
	}

	/**
	 * Has this task finished?
	 * @return
	 */
	public boolean isDone() {
		return done;
	}

	/**
	 * Has this task been executed successfully?
	 * @return
	 */
	public boolean isDoneOk() {
		return done && (exitValue == 0) && checkOutputFiles();
	}

	/**
	 * Has this task been executed and failed?
	 * @return
	 */
	public boolean isFailed() {
		return done && ((exitValue != 0) || !checkOutputFiles());
	}

	public boolean isStarted() {
		return started;
	}

	/**
	 * Reset parameters and allow a task to be re-executed
	 */
	public void reset() {
		done = false;
		exitValue = 0;
		outputFiles = null;
	}

	@Override
	public void serializeParse(BigDataScriptSerializer serializer) {
		// Note that "Task classname" field has been consumed at this point
		id = serializer.getNextField();
		canFail = serializer.getNextFieldBool();
		done = serializer.getNextFieldBool();
		exitValue = (int) serializer.getNextFieldInt();
		node = serializer.getNextField();
		queue = serializer.getNextField();
		programFileName = serializer.getNextFieldString();
		programTxt = serializer.getNextFieldString();
		stdoutFile = serializer.getNextFieldString();
		stderrFile = serializer.getNextFieldString();
		exitCodeFile = serializer.getNextFieldString();

		resources = new HostResources();
		resources.serializeParse(serializer);
	}

	@Override
	public String serializeSave(BigDataScriptSerializer serializer) {
		return getClass().getSimpleName() //
				+ "\t" + id // 
				+ "\t" + canFail // 
				+ "\t" + done // 
				+ "\t" + exitValue // 
				+ "\t" + node // 
				+ "\t" + queue // 
				+ "\t" + serializer.serializeSaveValue(programFileName) //
				+ "\t" + serializer.serializeSaveValue(programTxt) //
				+ "\t" + serializer.serializeSaveValue(stdoutFile) //
				+ "\t" + serializer.serializeSaveValue(stderrFile) //
				+ "\t" + serializer.serializeSaveValue(exitCodeFile) //
				+ "\t" + resources.serializeSave(serializer) //
				+ "\n";
	}

	public void setCanFail(boolean canFail) {
		this.canFail = canFail;
	}

	public void setDebug(boolean debug) {
		this.debug = debug;
	}

	public void setDone(boolean done) {
		this.done = done;
	}

	public void setExitValue(int exitValue) {
		this.exitValue = exitValue;
	}

	public void setNode(String node) {
		this.node = node;
	}

	public void setOutputFiles(List<String> outputFiles) {
		this.outputFiles = outputFiles;
	}

	public void setPid(String pid) {
		this.pid = pid;
	}

	public void setQueue(String queue) {
		this.queue = queue;
	}

	public void setStarted(boolean started) {
		this.started = started;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

}
