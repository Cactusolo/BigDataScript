#-------------------------------------------------------------------------------
# Perform base calling
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Parameters
#-------------------------------------------------------------------------------

string genome	# Genome name
string[] bam 	# List of bam files
string out		# VCF output file

int maxVcfHeadeLen = 2000	# We expect vec headers to be less than this many lines

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

#---
# Sanity check: Command line arguments
#---
if( genome.isEmpty() || (bam.size() < 1)) {
	print("Usage: baseCalling.bds -genome genome.fasta -out out.vcf -bam file_1.bam file_2.bam ... file_N.bam\n")
	exit 1
}

# Check that genome files exist
if( !genome.exists() ) {
	print("File '$genome' does not exists!\n");
	exit 1
}

# Check that each bam exists
for( string b : bam ) {
	if( ! b.exists() ) {
		print("File '$b' does not exists!\n");
		exit 1
	}
}

#-------------------------------------------------------------------------------
# Base calling
#-------------------------------------------------------------------------------

if( out <- bam ) {
	print("Base calling: Creating $out from $bam\n")
} else {
	print("Base calling: Nothing to do, file '$out' is up to date\n")
	exit 0
}

#---
# Index files
#---
# Fasta index of reference genome
string[] chrs = fastaIndex(genome)

# Index all bam files
for( string b : bam ) bamIndex(b)

wait

#---
# Base calling
#---

# Create a list fo bam files as a single string
string bams
for( string b : bam ) bams = bams + "$b "

# Invoke bcftools
print("Creating VCF file $out from files: $bams\n")
string[] outChrs
for( string chr : chrs ) {
	# One base calling task per chromosome
	string outChr = "$out.$chr"
	outChrs.add( outChr )
	print("Creating output for chromosome $chr in file $outChr\n")

	# Create output VCF for this chromosome
	task ( outChr <- bam ) {
		sys samtools mpileup -r $chr -uf $genome $bams | bcftools view -vcg - > $outChr
	}
}

#---
# Join all VCF files
#---
print("Creating output VCF file $out\n")
# Add header
string firstVcf = outChrs.head()
sys head -n $maxVcfHeadeLen $firstVcf | grep "^#" > $out

# Concatenate all VCF files
for( string outChr : outChrs ) {
	print("\tAppend $outChr\n")
	sys grep -v "^#" $outChr >> $out
}

exit 0

#-------------------------------------------------------------------------------
# Index genome fasta file
# Return a list of chromosomes
#-------------------------------------------------------------------------------
string[] fastaIndex(string gen) {
	# Index fasta
	string faidx = gen.dirName() + "/" + gen.baseName() + ".fai"
	print("Creating index file $faidx\n")
	task( faidx <- genome ) {
		sys samtools faidx $genome
	}

	# Get a list of chromosomes
	print("Chromosomes:\n");
	string tid = sys cut -f 1 $faidx
	string[] chromos = tid.stdout().lines()

	return chromos
}

#-------------------------------------------------------------------------------
# Index a BAM file
#-------------------------------------------------------------------------------
string bamIndex(string bam) {
	string bamidx = "$bam.bai"
	print("Indexing BAM file $bam\n")
	task( bamidx <- bam ) {
		sys samtools index $bam
	}
	return bamidx
}
